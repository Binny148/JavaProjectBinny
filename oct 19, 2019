oct 19, 2019

(*) trim
removes any space in the beginning and end of the String.
> takes: nothing
returns: String
ex:
String str = "        Java is fun    ";
str = str.trim()----> " Java is fun"
Delet spaces: str.repalce(" ","");----> "Javaisfun"

(*)startsWith()
check if the string begins with the passed String
>takes: String
>return: boolean
---> ex:
String str = "Java"
str.startsWith("Ja")---> true
str.startsWith("ja")---> false
str.startsWith("Java")-->true
str.startsWith("J")---->true
str.startsWith("Jova")---> false

(*)endsWith()
> Checkes if the String ends with the passed String
>takes: String
> return:boolean
-->String str = "Java";
str.endsWith("v")--> false
str.endsWith("va")--> true

(*) compareTo()
>will compare how the passed String is related to the String being checked lexicographically 
----> lexicographically (starts with number, alphabeticaly with uppercase then lowercase)
> takes : String
>returns:
negative number : if checked String comes first
zero: if two String
postive number: if the passed String omes first

--> Ex:
String word = "Java";
String world2 = "James";
word.compareTo(word2)
(checked).      (passed)




convert from String to number
String num = "1534";

Integer. valueOf(String str)
Double.valueOf(String str)

int number = Integer.valueOf(num) ----> 1534


==================================
Nov 05, 2019
================================

(*) Method Overloading 
-> Having multiple version of the same method in one class
-> this allows you to have a method with the same name, but implementation ( just imagine substring method in string manuplations)
-> Method name , number parameters , type of parameters
-> return type is not a part of the signture 

----------------------------------------------
* Rules for overlaoding 

1) Give the same name for the method 
2) Change the number of parameter or change the datatype of the parameter 


public static void draw (String color)
// statement
}
public static void draw(String color1,String color2){
	
}
public static void draw (String color1, int size){
	
}

-- If your overload a method a successfully you can change the return type

IQ: Does changing the return type overload the method?
-No .Return type is not part of the method signature , in this case you also confuse java.

(*) Datatype parameter promotion 
byte->short->int->float/long->double 

=============================================================================
Nov 06, 2019
==========================================================================

(*) Varargs --> variable arguments

-> using varargs allows you to pass an array as the argument without having to creat an array first >

> The elements are passed in paramters
public static void main(String [] args){
	printArray(3,2,34,4)

}

--syntax:

public static void print ( int ... arr){

	//your code here 

}




================================================================================================================
Nov 12, 2019
================================================================================================================

(*) Review :
--> Arrays are one type of collection . They store multiple infrmation of the same kind . The datatype provided in the array declaration .

--> Arrays can store primitive datatype and object datatypes
 > primites : int array
 > object: String array 

--> Recall: Arrays are also objects
> This means Arrays should be able to hold other arrays .

(*) what is a multi dimentianl arrays
> an arrays inside of an array 

Syntax

datatype [][] varName = new datatype [sizeOf2Darrays] [];


int [] [] group = new int [4][];

--> groups is a 2D int array that can hold four int arrays inside of it . The size of the inner int arrays is not declared.

--> After declaration of this 2D array all the values will be null.


(*) Notes: when you declare a 2D array , the inner arrays sizes do not need to be given
> This means the inner arrays can have different number of elements 


-- How to print multi dimentional arrays 
> Arrays.deepToString()

------------------------------------------------------------------

int [] [] numbers = {{1,2,3} , {4,5,6}, {7,8,9}}

> numbers is holding 3 inte with 3 elements



























